package buildsrc.tasks

import org.gradle.api.DefaultTask
import org.gradle.api.file.DirectoryProperty
import org.gradle.api.file.FileCollection
import org.gradle.api.file.FileType.FILE
import org.gradle.api.tasks.*
import org.gradle.api.tasks.PathSensitivity.RELATIVE
import org.gradle.process.ExecOperations
import org.gradle.work.ChangeType.ADDED
import org.gradle.work.ChangeType.MODIFIED
import org.gradle.work.Incremental
import org.gradle.work.InputChanges
import javax.inject.Inject

abstract class RegenerateWorkflowsKt @Inject constructor(
    private val executor: ExecOperations,
) : DefaultTask() {

    /** The generated YAML workflow files, each generated by a file in [ktsFiles] */
    @get:OutputFiles
    val yamlFiles: FileCollection = workflowsDir.asFileTree.matching { include("**/*.yaml") }

    /** The KTS workflow files that will generate the [yamlFiles]. */
    @get:InputFiles
    @get:Optional
    @get:Incremental
    @get:PathSensitive(RELATIVE)
    val ktsFiles: FileCollection = workflowsDir.asFileTree.matching { include("**/*.kts") }

    /** The directory that contains the workflow files */
    @get:Internal
    abstract val workflowsDir: DirectoryProperty

    init {
        group = "workflows-kt"
        description = "updates all kts workflow files. Requires that `kotlin` is on the path."
    }

    @TaskAction
    fun execute(
        ktsFileChanges: InputChanges,
    ) {
        val workflowsDir = workflowsDir.asFile.get()

        ktsFileChanges
            .getFileChanges(ktsFiles)
            .filter { it.fileType == FILE && it.changeType in setOf(MODIFIED, ADDED) }
            .forEach { change ->
                val ktsFile = change.file
                val relativePath = ktsFile.toRelativeString(workflowsDir)

                logger.info("Updating workflow $relativePath")

                val result = executor.exec {
                    workingDir(ktsFile.parentFile)
                    executable("./${ktsFile.name}")
                    setIgnoreExitValue(true)
                }

                if (result.exitValue == 0) {
                    logger.lifecycle("Updated workflow $relativePath")
                } else {
                    logger.warn("failed to update workflow $relativePath")
                }
            }
    }
}
